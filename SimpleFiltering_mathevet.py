# -*- coding: utf-8 -*-
"""circum_sphere

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YncydsXf5p5nAbBU8vn3qlouo82Y8f18
"""

import numpy as np
from scipy.spatial import Delaunay
from scipy.spatial import distance

alpha = 0.01

# (3D)
# Open the file and read the vertices as strings
with open("bunny.xyz", "r") as f:
    vertex_strings = f.readlines()

# Convert the vertex strings to a NumPy array of shape (N, 3)
points3D = np.zeros((len(vertex_strings), 3))
for i, vertex_str in enumerate(vertex_strings):
    vertex_arr = [float(coord) for coord in vertex_str.strip().split()]
    points3D[i] = vertex_arr


tri = Delaunay(points3D)

def circumradius(p1,p2,p3):
    x1,y1,z1 = p1
    x2,y2,z2 = p2
    x3,y3,z3 = p3
    a = np.sqrt((x1-x2)**2+(y1-y2)**2+(z1-z2)**2)
    b = np.sqrt((x3-x2)**2+(y3-y2)**2+(z3-z2)**2)
    c = np.sqrt((x1-x3)**2+(y1-y3)**2+(z1-z3)**2)
    return (a*b*c)/np.sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))

with open('Bunny.stl','w') as f:
    f.write('solid bunny\n')


    for tetra in tri.simplices:
        for k in range(len(tetra)):
            p1, p2, p3 = points3D[tetra[k%4]],points3D[tetra[(k+1)%4]],points3D[tetra[(k+2)%4]]
            #print(p1,p2,p3)
            if circumradius(p1,p2,p3)<alpha:
                n = np.cross(p2-p1,p3-p1)
                f.write(f'facet normal {n[0]} {n[1]} {n[2]}\n')
                f.write('   outer loop\n')
                v1,v2,v3 = p2-p1,p3-p2,p1-p3
                f.write(f'       vertex {p1[0]} {p1[1]} {p1[2]}\n')
                f.write(f'       vertex {p2[0]} {p2[1]} {p2[2]}\n')               
                f.write(f'       vertex {p3[0]} {p3[1]} {p3[2]}\n')
                f.write('   endloop\n')
                f.write('endfacet\n')

    f.write('endsolid bunny')
    f.close()

